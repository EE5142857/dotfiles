# --------------------------------------
# Shougo
#
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
lazy = 1
on_ft = ['markdown']
hook_source = '''
let g:neosnippet#snippets_directory = '~/.vim/snippets'
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
lazy = 1
on_source = ['neosnippet.vim']

# --------------------------------------
# View
#
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
let g:winresizer_start_key = '<C-w><C-w>'
'''

# --------------------------------------
# Edit
#
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2
'''

[[plugins]]
repo = 'tyru/caw.vim'

# --------------------------------------
# Color Scheme
#
[[plugins]]
repo = 'tomasiser/vim-code-dark'
hook_add = '''
set t_Co=256
set t_ut=
colorscheme codedark
'''

# --------------------------------------
# Status Line
#
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
\ 'component': {
\   'mylineinfo': '%3l/%L, %-2c'
\ },
\ 'active': {
\   'left': [
\     ['mode', 'paste'],
\     ['filename', 'readonly', 'modified']
\   ],
\   'right': [
\     ['mylineinfo'],
\     ['fileformat', 'fileencoding', 'filetype']
\   ]
\ },
\ 'inactive': {
\   'left': [
\     ['filename']
\   ],
\   'right': [
\     []
\   ]
\ },
\ 'tabline': {
\   'left': [
\     ['tabs']
\   ],
\   'right': [
\     ['mydirname']
\   ]
\ },
\ 'separator': {
\   'left': '',
\   'right': ''
\ },
\ 'component_function': {
\   'mydirpath': 'LLGetDirPath',
\   'mydirname': 'LLGetDirName'
\ }
\}
function! LLGetDirName()
  return fnamemodify(getcwd(), ':t')
endfunction
function! LLGetDirPath()
  return fnamemodify(getcwd(), ':p:h')
endfunction
'''

# --------------------------------------
# Markdown
#
[[plugins]]
repo = 'plasticboy/vim-markdown'
lazy = 1
on_ft = ['markdown']
hook_source = '''
let g:tex_conceal = ""
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_math = 1
let g:vim_markdown_no_default_key_mappings = 1
nnoremap <silent> <Space>ft :TableFormat<CR>
'''

[[plugins]]
# required by 'plasticboy/vim-markdown'
lazy = 1
repo = 'godlygeek/tabular'
on_source = ['vim-markdown']

# --------------------------------------
# Python
#
[[plugins]]
repo = 'goerz/jupytext.vim'
lazy = 1
if = "has('nvim')"
on_ft = ['python']
hook_source = '''
let g:jupytext_enable = 1
let g:jupytext_fmt = 'py:percent'
let g:jupytext_filetype_map = {'py': 'python'}
nnoremap <silent> <Space>js :Silent jupytext --sync .\*.ipynb<CR>
'''

[[plugins]]
repo = 'jpalardy/vim-slime'
lazy = 1
if = "has('nvim')"
on_ft = ['python', 'r', 'sql']
hook_source = '''
let g:slime_target = "neovim"
let g:slime_cell_delimiter = "# %%"
command! -nargs=0 MyIPython call MyIPython()
function! MyIPython() abort
  execute 'vsplit | wincmd l'
  if has('nvim')
    execute 'terminal'
  else
    execute 'terminal ++curwin'
    call feedkeys("\<Esc>")
  endif
  call feedkeys("i" . "activate.bat" . "\<CR>\<Esc>")
  call feedkeys("i" . "ipython" . "\<CR>\<Esc>")
  call feedkeys("\<C-W>h")
endfunction
'''

[[plugins]]
repo = 'hanschen/vim-ipython-cell'
lazy = 1
if = "has('nvim')"
on_ft = ['python', 'sql']
hook_source = '''
nnoremap <C-M> :call ExecuteCell()<CR>
function! ExecuteCell() abort
  execute 'IPythonCellExecuteCell'
  execute 'wincmd l'
  call feedkeys("i" . "\<CR>\<Esc>")
  call feedkeys("\<C-W>h")
endfunction
'''
