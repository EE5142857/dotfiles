# --------------------------------------
# Shougo
#
[[plugins]]
repo = 'Shougo/dein.vim'

# --------------------------------------
# Deno
#
[[plugins]]
repo = 'vim-denops/denops.vim'
if = "has('nvim')"

[[plugins]]
repo = 'vim-denops/denops-helloworld.vim'
if = "has('nvim')"

# --------------------------------------
# filer
#
[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
nnoremap <silent> <Plug>(my-filer)t :Fern . -reveal=% -drawer -toggle<CR>
let g:fern#default_hidden = 1
'''

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'

[[plugins]]
repo = 'lambdalisue/fern-hijack.vim'

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
hook_add = '''
let g:fern#renderer = 'nerdfont'
'''

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

# --------------------------------------
# view
#
[[plugins]]
repo = 'justinmk/vim-sneak'
hook_add = '''
let g:sneak#label = 1
nmap s <Plug>Sneak_s
nmap S <Plug>Sneak_S
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2
'''

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
let g:winresizer_start_key = "\<C-w>\<C-w>"
'''

# --------------------------------------
# edit
#
[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'machakann/vim-sandwich'

# --------------------------------------
# terminal
#
[[plugins]]
repo = 'kassio/neoterm'
if = "has('nvim')"
hook_source = '''
let g:neoterm_autoscroll = 1
let g:neoterm_default_mod = 'botright'
let g:neoterm_size = 10
let g:neoterm_eof = "\r\n"

nnoremap <silent> <Plug>(my-terminal)oh   <Cmd>call <SID>split(v:count)<CR>
nnoremap <silent> <Plug>(my-terminal)ov   <Cmd>call <SID>vsplit()<CR>

function! s:split(size) abort
  let l:tmpmod = g:neoterm_default_mod
  let l:tmpsize = g:neoterm_size
  if a:size > 0
   let l:asize = a:size
  else
    let l:asize = l:tmpsize
  endif
  let g:neoterm_default_mod = 'botright'
  let g:neoterm_size = l:asize
  Tnew
  let g:neoterm_default_mod = l:tmpmod
  let g:neoterm_size = l:tmpsize
endfunction

function! s:vsplit() abort
  let l:tmpmod = g:neoterm_default_mod
  let l:tmpsize = g:neoterm_size
  let g:neoterm_default_mod = 'vertical'
  let g:neoterm_size = ''
  Tnew
  let g:neoterm_default_mod = l:tmpmod
  let g:neoterm_size = l:tmpsize
endfunction

nnoremap <silent> <Plug>(my-terminal)emm  <Cmd>execute 'T' "mmdc -i" fnamemodify(@%, ':t') "-o" fnamemodify(@%, ':t:r') . ".svg && mmdc -i" fnamemodify(@%, ':t') "-o" fnamemodify(@%, ':t:r') . ".png"<CR>
nnoremap <silent> <Plug>(my-terminal)epu  <Cmd>execute 'T' "java -jar" g:my_plantuml_path fnamemodify(@%, ':p') "-charset UTF-8 -svg && java -jar" g:my_plantuml_path fnamemodify(@%, ':p') "-charset UTF-8 -png"<CR>

nnoremap <silent> <Plug>(my-terminal)sjp  <Cmd>execute 'TREPLSetTerm' split(@%, '-')[-1]<CR>
nnoremap <silent> <Plug>(my-terminal)spy  <Nop>
nnoremap <silent> <Plug>(my-terminal)srr  <Nop>
nnoremap <silent> <Plug>(my-terminal)ssq  <Cmd>execute v:count.'T' "pg_ctl start && psql -U postgres -d recipe"<CR>

nnoremap <silent> <Plug>(my-terminal)rjp  <Cmd>call <SID>send_cell()<CR>
nnoremap <silent> <Plug>(my-terminal)rpy  <Cmd>execute v:count.'T' "python" @a<CR>
nnoremap <silent> <Plug>(my-terminal)rrr  <Cmd>execute v:count.'T' "rscript --encoding=utf-8" @a<CR>
nnoremap <silent> <Plug>(my-terminal)rsq  <Cmd>execute v:count.'T' "\i" @a<CR>

function! s:send_cell() abort
  let l:cell_delimiter = '# %%'
  let l:line_ini = search(l:cell_delimiter, 'bcnW')
  let l:line_end = search(l:cell_delimiter, 'nW')

  let l:line_ini = l:line_ini ? l:line_ini + 1 : 1
  let l:line_end = l:line_end ? l:line_end - 1 : line("$")

  if line_ini <= line_end
    " execute line_ini .','. line_end 'call TREPLSendSelection()'
    call neoterm#repl#line(line_ini, line_end)
  else
    echo 'sending cell failed'
  endif
endfunction
'''

# --------------------------------------
# colorscheme
#
[[plugins]]
repo = 'tomasiser/vim-code-dark'
hook_source = '''
set t_Co=256
set t_ut=
colorscheme codedark
'''

# --------------------------------------
# statusline
#
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_source = '''
set laststatus=2
set noshowmode
if !has('gui_running')
  set t_Co=256
endif

let g:lightline = {
  \ 'colorscheme': 'codedark',
  \ 'component': {
  \   'mylineinfo': '%3l/%L, %-2c',
  \ },
  \ 'active': {
  \   'left': [
  \     ['mode', 'paste'],
  \     ['filename', 'readonly', 'modified', 'mydirpath'],
  \   ],
  \   'right': [
  \     ['mystatus'],
  \     ['lineinfo', 'percent'],
  \     ['fileformat', 'fileencoding', 'filetype'],
  \   ],
  \ },
  \ 'inactive': {
  \   'left': [
  \     ['filename'],
  \   ],
  \   'right': [
  \     [],
  \   ],
  \ },
  \ 'tab': {
  \   'active': ['tabnum', 'filename', 'modified'],
  \   'inactive': ['tabnum', 'filename', 'modified'],
  \ },
  \ 'tabline': {
  \   'left': [
  \     ['tabs'],
  \   ],
  \   'right': [
  \     ['mycwdname'],
  \   ],
  \ },
  \ 'separator': {
  \   'left': "",
  \   'right': "",
  \ },
  \ 'subseparator': {
  \   'left': "|",
  \   'right': "|",
  \ },
  \ 'component_function': {
  \   'mystatus': 'LLGetStatus',
  \   'mycwdname': 'LLGetCwdName',
  \   'mypath': 'LLGetPath',
  \   'mydirpath': 'LLGetDirPath',
  \ },
  \}

function! LLGetStatus() abort
  return "\ue62b" . ' '
endfunction

function! LLGetCwdName() abort
  return "\uf413" . fnamemodify(getcwd(), ':t') . ' '
endfunction

function! LLGetPath() abort
  return substitute(fnamemodify(@%, ':p'), '\\', '\/', 'g')
endfunction

function! LLGetDirPath() abort
  return substitute(fnamemodify(@%, ':p:h'), '\\', '\/', 'g')
endfunction
'''

# --------------------------------------
# Python
#
[[plugins]]
repo = 'goerz/jupytext.vim'
if = "has('nvim')"
hook_add = '''
let g:jupytext_enable = 1
let g:jupytext_fmt = 'py:percent'
let g:jupytext_filetype_map = {'py': 'python'}
'''
