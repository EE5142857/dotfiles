# --------------------------------------
# colorscheme
#
[[plugins]]
repo = 'sainnhe/gruvbox-material'
on_event = ['VimEnter']
hook_post_source = '''
let g:gruvbox_material_better_performance = 1
let g:gruvbox_material_disable_italic_comment = 1
colorscheme gruvbox-material
'''

[[plugins]]
repo = 'tomasiser/vim-code-dark'
if = 0
on_event = ['VimEnter']
hook_source = '''
set t_Co=256
set t_ut=
colorscheme codedark
'''

[[plugins]]
repo = 'jacoborus/tender.vim'
if = 0
on_event = ['VimEnter']
hook_source = '''
colorscheme tender
'''

# --------------------------------------
# highlight
#
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = "has('nvim')"
on_event = ['VimEnter']
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
    disable = {},
  },
  indent = {
    enable = true,
    disable = {},
  },
  ensure_installed = {
    "bash",
    "css",
    "html",
    "json",
    "markdown",
    "python",
    "r",
    "toml",
    "vim",
  },
  additional_vim_regex_highlighting = false,
}
EOF
'''

# --------------------------------------
# filer
#
[[plugins]]
repo = 'lambdalisue/fern.vim'
on_event = ['VimEnter']
hook_source = '''
nnoremap <silent> <Plug>(my-filer)t :Fern . -reveal=% -drawer -toggle<CR>
let g:fern#default_hidden = 1
'''

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
on_source = ['fern.vim']

[[plugins]]
repo = 'lambdalisue/fern-hijack.vim'
on_source = ['fern.vim']

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
hook_add = '''
let g:fern#renderer = 'nerdfont'
'''

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

# --------------------------------------
# statusline
#
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_source = '''
set laststatus=2
set noshowmode
if !has('gui_running')
  set t_Co=256
endif

let g:lightline = {
  \   'colorscheme': 'codedark',
  \   'component': {
  \     'myblank': ' ',
  \   },
  \   'active': {
  \     'left': [
  \       ['mode', 'paste'],
  \       ['filename', 'readonly', 'modified'],
  \     ],
  \     'right': [
  \       ['lineinfo', 'myblank'],
  \       ['percent'],
  \       ['fileformat', 'fileencoding', 'filetype'],
  \     ],
  \   },
  \   'inactive': {
  \     'left': [
  \       ['filename'],
  \     ],
  \     'right': [
  \       [],
  \     ],
  \   },
  \   'tab': {
  \     'active': ['tabnum', 'filename', 'modified'],
  \     'inactive': ['tabnum', 'filename', 'modified'],
  \   },
  \   'tabline': {
  \     'left': [
  \       ['tabs'],
  \     ],
  \     'right': [
  \       [],
  \     ],
  \   },
  \   'separator': {
  \     'left': '',
  \     'right': '',
  \   },
  \   'subseparator': {
  \     'left': '|',
  \     'right': '|',
  \   },
  \   'component_function': {
  \     'mycwdname': 'LLGetCwdName',
  \     'mypath': 'LLGetPath',
  \   },
  \ }

function! LLGetCwdName() abort
  return 'CWD: ' . fnamemodify(getcwd(), ':t')
endfunction

function! LLGetPath() abort
  return substitute(fnamemodify(@%, ':p'), '\\', '\/', 'g')
endfunction
'''

# --------------------------------------
# Git
#
[[plugins]]
repo = 'lambdalisue/gin.vim'
on_source = ['denops.vim']

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_event = ['VimEnter']

# --------------------------------------
# Markdown
#
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_source = '''
let g:tex_conceal = ""
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_math = 1
let g:vim_markdown_no_default_key_mappings = 1
'''

# --------------------------------------
# terminal
#
[[plugins]]
repo = 'kassio/neoterm'
on_event = ['VimEnter']
hook_source = '''
let g:neoterm_autoscroll = 1
let g:neoterm_default_mod = 'botright'
let g:neoterm_eof = "\<CR>"
let g:neoterm_size = 10

nnoremap <silent> <Plug>(my-terminal)oh   <Cmd>call <SID>split(v:count)<CR>
nnoremap <silent> <Plug>(my-terminal)ov   <Cmd>call <SID>vsplit()<CR>

function! s:split(size) abort
  let l:tmpmod = g:neoterm_default_mod
  let l:tmpsize = g:neoterm_size
  if a:size > 0
   let l:asize = a:size
  else
    let l:asize = l:tmpsize
  endif
  let g:neoterm_default_mod = 'botright'
  let g:neoterm_size = l:asize
  Tnew
  let g:neoterm_default_mod = l:tmpmod
  let g:neoterm_size = l:tmpsize
endfunction

function! s:vsplit() abort
  let l:tmpmod = g:neoterm_default_mod
  let l:tmpsize = g:neoterm_size
  let g:neoterm_default_mod = 'vertical'
  let g:neoterm_size = ''
  Tnew
  let g:neoterm_default_mod = l:tmpmod
  let g:neoterm_size = l:tmpsize
endfunction

nnoremap <silent> <Plug>(my-terminal)mm   <Cmd>execute 'T'
  \ $USERPROFILE . "\\node_modules\\.bin\\mmdc -i" fnamemodify(@%, ':t') "-o" fnamemodify(@%, ':t:r') . ".svg"
  \ "&&"
  \ $USERPROFILE . "\\node_modules\\.bin\\mmdc -i" fnamemodify(@%, ':t') "-o" fnamemodify(@%, ':t:r') . ".png"<CR>
nnoremap <silent> <Plug>(my-terminal)pu   <Cmd>execute 'T'
  \ "java -jar" g:my_plantuml_path fnamemodify(@%, ':p') "-charset UTF-8 -svg"
  \ "&&"
  \ "java -jar" g:my_plantuml_path fnamemodify(@%, ':p') "-charset UTF-8 -png"<CR>
nnoremap <silent> <Plug>(my-terminal)jp   <Cmd>call <SID>send_cell()<CR>
nnoremap <silent> <Plug>(my-terminal)py   <Cmd>execute v:count.'T' "python" @a<CR>
nnoremap <silent> <Plug>(my-terminal)rr   <Cmd>TREPLSendFile<CR>
nnoremap <silent> <Plug>(my-terminal)rs   <Cmd>execute v:count.'T' "rscript --encoding=utf-8" @a<CR>
nnoremap <silent> <Plug>(my-terminal)sq   <Cmd>execute v:count.'T' "\\i" @a<CR>

function! s:send_cell() abort
  let l:cell_delimiter = '# %%'
  let l:line_ini = search(l:cell_delimiter, 'bcnW')
  let l:line_end = search(l:cell_delimiter, 'nW')

  let l:line_ini = l:line_ini ? l:line_ini + 1 : 1
  let l:line_end = l:line_end ? l:line_end - 1 : line("$")

  if line_ini <= line_end
    " execute line_ini .','. line_end 'call TREPLSendSelection()'
    call neoterm#repl#line(line_ini, line_end)
  else
    echo 'sending cell failed'
  endif
endfunction
'''
