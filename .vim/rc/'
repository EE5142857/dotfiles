# --------------------------------------
# Shougo
#
[[plugins]]
repo = 'Shougo/dein.vim'

# --------------------------------------
# Deno
#
[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'vim-denops/denops-helloworld.vim'

# --------------------------------------
# LSP
#
[[plugins]]
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
# https://zenn.dev/mattn/articles/b83f9d94202914
repo = 'mattn/vim-lsp-settings'

# --------------------------------------
# completion
#
# [[plugins]]
# https://github.com/neoclide/coc.nvim/wiki/Language-servers
# repo = 'neoclide/coc.nvim'
# hook_post_update = '''
# call coc#util#install()
# CocInstall coc-json
# CocInstall coc-markdownlint
# CocInstall coc-pyright
# '''

# --------------------------------------
# view
#
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
let g:winresizer_start_key = "\<C-w>\<C-w>"
'''

# --------------------------------------
# edit
#
[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'machakann/vim-sandwich'

# [[plugins]]
# repo = 'vim-syntastic/syntastic'
# hook_add = '''
# let g:syntastic_always_populate_loc_list = 1
# let g:syntastic_auto_loc_list = 0
# let g:syntastic_loc_list_height = 3
# let g:syntastic_mode_map = {'mode': 'passive'}
# let g:syntastic_python_checkers = ['flake8']
# '''

# --------------------------------------
# colorscheme
#
[[plugins]]
repo = 'tomasiser/vim-code-dark'
hook_source = '''
set t_Co=256
set t_ut=
colorscheme codedark
'''

# --------------------------------------
# statusline
#
# let g:lightline = {
# \ 'active': {
# \   'right': [
# \     ['syntastic']
# \   ]
# \ },
# \ 'component_expand':{
# \   'coc': 'coc#status',
# \   'syntastic': 'SyntasticStatuslineFlag'
# \ },
# \ 'component_type': {
# \   'coc': 'error',
# \   'syntastic': 'error'
# \ }
# \}
# augroup LLAutoUpdate
#   autocmd!
#   autocmd BufWritePost * call LLSyntastic()
# augroup END
# nnoremap <silent> <Plug>(my-edit)y :call LLSyntastic()<CR>
# function! LLSyntastic()
#   SyntasticCheck
#   call lightline#update()
# endfunction
[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['syntastic']
hook_source = '''
set laststatus=2
set noshowmode
if !has('gui_running')
  set t_Co=256
endif

let g:lightline = {
\ 'colorscheme': 'default',
\ 'component': {
\   'mylineinfo': '%3l/%L, %-2c'
\ },
\ 'active': {
\   'left': [
\     ['mode', 'paste'],
\     ['filename', 'readonly', 'modified'],
\     ['mypath']
\   ],
\   'right': [
\     ['mylineinfo'],
\     ['fileformat', 'fileencoding', 'filetype']
\   ]
\ },
\ 'inactive': {
\   'left': [
\     ['filename']
\   ],
\   'right': [
\     []
\   ]
\ },
\ 'tabline': {
\   'left': [
\     ['tabs']
\   ],
\   'right': [
\     ['mycwdname']
\   ]
\ },
\ 'separator': {
\   'left': '',
\   'right': ''
\ },
\ 'component_function': {
\   'mycwdname': 'LLGetCwdName',
\   'mypath': 'LLGetPath'
\ }
\}

function! LLGetCwdName()
  return fnamemodify(getcwd(), ':t')
endfunction
function! LLGetPath()
  return substitute(fnamemodify(@%, ':p:h'), '\\', '\/', 'g')
endfunction
'''

# --------------------------------------
# Python
#
[[plugins]]
repo = 'goerz/jupytext.vim'
hook_add = '''
let g:jupytext_enable = 1
let g:jupytext_fmt = 'py:percent'
let g:jupytext_filetype_map = {'py': 'python'}
'''
