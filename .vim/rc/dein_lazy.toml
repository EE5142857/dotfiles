# --------------------------------------
# colorscheme
#
[[plugins]]
repo = 'sainnhe/gruvbox-material'
if = 1
on_event = ['VimEnter']
hook_post_source = '''
let g:gruvbox_material_better_performance = 1
let g:gruvbox_material_disable_italic_comment = 1
colorscheme gruvbox-material
'''

[[plugins]]
repo = 'tomasiser/vim-code-dark'
if = 0
on_event = ['VimEnter']
hook_source = '''
set t_Co=256
set t_ut=
colorscheme codedark
'''

[[plugins]]
repo = 'jacoborus/tender.vim'
if = 0
on_event = ['VimEnter']
hook_source = '''
colorscheme tender
'''

# --------------------------------------
# view
#
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
on_event = ['VimEnter']
hook_source = '''
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2
'''

[[plugins]]
repo = 'simeji/winresizer'
on_event = ['VimEnter']
hook_source = '''
let g:winresizer_start_key = "\<C-w>\<C-w>"
let g:winresizer_horiz_resize = 1
let g:winresizer_vert_resize = 5
'''

# --------------------------------------
# edit
#
[[plugins]]
repo = 'tyru/caw.vim'
on_event = ['VimEnter']

[[plugins]]
repo = 'machakann/vim-sandwich'
on_event = ['VimEnter']

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_event = ['VimEnter']

# --------------------------------------
# Markdown
#
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_source = '''
let g:tex_conceal = ""
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_math = 1
let g:vim_markdown_no_default_key_mappings = 1
'''

# --------------------------------------
# Python
#
[[plugins]]
repo = 'goerz/jupytext.vim'
on_event = ['VimEnter']
hook_source = '''
let g:jupytext_enable = 1
let g:jupytext_fmt = 'py:percent'
let g:jupytext_filetype_map = {'py': 'python'}
'''

# --------------------------------------
# terminal
#
[[plugins]]
repo = 'kassio/neoterm'
on_event = ['VimEnter']
hook_source = '''
let g:neoterm_autoscroll = 1
let g:neoterm_default_mod = 'botright'
let g:neoterm_eof = "\<CR>"
let g:neoterm_size = 10

nnoremap <silent> <Plug>(my-terminal)oh   <Cmd>call <SID>split(v:count)<CR>
nnoremap <silent> <Plug>(my-terminal)ov   <Cmd>call <SID>vsplit()<CR>

function! s:split(size) abort
  let l:tmpmod = g:neoterm_default_mod
  let l:tmpsize = g:neoterm_size
  if a:size > 0
   let l:asize = a:size
  else
    let l:asize = l:tmpsize
  endif
  let g:neoterm_default_mod = 'botright'
  let g:neoterm_size = l:asize
  Tnew
  let g:neoterm_default_mod = l:tmpmod
  let g:neoterm_size = l:tmpsize
endfunction

function! s:vsplit() abort
  let l:tmpmod = g:neoterm_default_mod
  let l:tmpsize = g:neoterm_size
  let g:neoterm_default_mod = 'vertical'
  let g:neoterm_size = ''
  Tnew
  let g:neoterm_default_mod = l:tmpmod
  let g:neoterm_size = l:tmpsize
endfunction

nnoremap <silent> <Plug>(my-terminal)mm   <Cmd>execute 'T'
  \ $USERPROFILE . "\\node_modules\\.bin\\mmdc -i" fnamemodify(@%, ':t') "-o" fnamemodify(@%, ':t:r') . ".svg"
  \ "&&"
  \ $USERPROFILE . "\\node_modules\\.bin\\mmdc -i" fnamemodify(@%, ':t') "-o" fnamemodify(@%, ':t:r') . ".png"<CR>
nnoremap <silent> <Plug>(my-terminal)pu   <Cmd>execute 'T'
  \ "java -jar" g:my_plantuml_path fnamemodify(@%, ':p') "-charset UTF-8 -svg"
  \ "&&"
  \ "java -jar" g:my_plantuml_path fnamemodify(@%, ':p') "-charset UTF-8 -png"<CR>
nnoremap <silent> <Plug>(my-terminal)pr   <Cmd>call <SID>send_cell()<CR>
nnoremap <silent> <Plug>(my-terminal)py   <Cmd>execute v:count.'T' "python" substitute(fnamemodify(@%, ':p'), '\\', '\/', 'g')<CR>
nnoremap <silent> <Plug>(my-terminal)rs   <Cmd>execute v:count.'T' "Rscript --encoding=utf-8" substitute(fnamemodify(@%, ':p'), '\\', '\/', 'g')<CR>
nnoremap <silent> <Plug>(my-terminal)sq   <Cmd>execute v:count.'T' "\\i" substitute(fnamemodify(@%, ':p'), '\\', '\/', 'g')<CR>

function! s:send_cell() abort
  let l:cell_delimiter = '# %%'
  let l:line_ini = search(l:cell_delimiter, 'bcnW')
  let l:line_end = search(l:cell_delimiter, 'nW')

  let l:line_ini = l:line_ini ? l:line_ini + 1 : 1
  let l:line_end = l:line_end ? l:line_end - 1 : line("$")

  " execute line_ini .','. line_end 'call TREPLSendSelection()'
  call neoterm#repl#line(line_ini, line_end)
  sleep 100m
  execute 'T' "\<CR>"
endfunction
'''
