# --------------------------------------
# Shougo
#
[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_ft = ['markdown']
hook_source = '''
let g:neosnippet#snippets_directory = '~/.vim/snippets'
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
call ddc#custom#patch_global('sources', ['nvim-lsp', 'around', 'vsnip'])
call ddc#custom#patch_global('sourceOptions', {
\ '_': {
\ 'matchers': ['matcher_head'],
\ 'sorters': ['sorter_rank'],
\ 'converters': ['converter_remove_overlap'],
\ },
\ 'around': {'mark': 'A'},
\ 'nvim-lsp': {
\ 'mark': 'L',
\ 'forceCompletionPattern': '\.\w*|:\w*|->\w*',
\ },
\ })
call ddc#custom#patch_global('sourceParams', {
\ 'around': {'maxSize': 500},
\ })
inoremap <silent><expr> <TAB>
\ ddc#map#pum_visible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()
inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'
call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
let g:vsnip_filetypes = {}
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'vim-vsnip'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
on_source = 'vim-vsnip'

# --------------------------------------
# Markdown
#
[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_source = '''
let g:tex_conceal = ""
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_math = 1
let g:vim_markdown_no_default_key_mappings = 1
nnoremap <silent> <Space>ft :TableFormat<CR>
'''

[[plugins]]
# required by 'plasticboy/vim-markdown'
repo = 'godlygeek/tabular'
on_source = ['vim-markdown']

# --------------------------------------
# Python
#
[[plugins]]
repo = 'jpalardy/vim-slime'
on_ft = ['python']
hook_source = '''
let g:slime_cell_delimiter = '# %%'
let g:slime_target = "neovim"
let g:slime_no_mappings = 1
nmap <leader>s <Plug>SlimeSendCell

augroup UpdateJobid
  autocmd!
  autocmd BufLeave *
  \ if &buftype == 'terminal'
  \|  let g:slime_last_channel = &channel
  \|endif
augroup END

function! SlimeOverride_EscapeText_python(text) abort
  let g:slime_dispatch_ipython_pause = 0

  let l:l_tmp = split(a:text, "\n", 1)
  let l:l_text = [l:l_tmp[0]]
  let l:i = 1
  while l:i < len(l:l_tmp) - 1
    call add(l:l_text, "\r\n")
    call add(l:l_text, l:l_tmp[l:i])
    let l:i = l:i + 1
  endwhile

  let l:l_ret = ["%cpaste -q", "\r\n"] + l:l_text + ["--", "\r\n"]
  return l:l_ret
endfunction
'''
